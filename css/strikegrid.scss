/* Usually, the outer container should not scroll, only the scrollbody. To accomplish this, either: 
 * (1) Give the container outside the component .el (outside .strike-grid-holder) some defined height, and/or 
 * (2) call StrikeGrid.height with a value.
 */

 .strike-grid-holder {
    max-width:100%;

    /* Normal usage. box sizes to the outer container, the height of which can be overridden with StrikeGrid.height: */
    height:100%;

    /* Stick to outer example. This cannot be overridden with StrikeGrid.height.
     * Note that the outer container must have max-height defined, and overflow:scroll in this case: */
    /* height:fit-content; */

    /* x-scrolling example. This is compatable with setting StrikeGrid.height, but NOT with automatically 
     * scaling to an outer container. */
    overflow: scroll;
    > .table-container {
        min-width: 600px;
    }
        
    transition:max-width .16s;
}
.table-container {
    max-width: 100%;
    background-color:#CCC;
    transition:width .16s, min-width .16s, max-width .16s;
}
.strike-grid {
    display: grid;
}
.strike-grid-header {
    /* sticky comes into effect if the container is larger than the content,
        * and causes its outer container to scroll. */
    position: sticky; 
    top:0px;
    z-index:1; /* keep visible even if we're scrolling the outer container. */
    background-color: #344;
}

$header-color:#444;
$header-column-lighten:6%;
$header-color-sorting: rgb(85, 99, 177); //placed on the cels, not the header row.
$default-text-color:rgb(26, 16, 5);
$default-row-color:#DEF;
$default-hover-color:rgb(255, 227, 175);
$default-select-color:rgb(247, 192, 91);
$row-column-lighten:1%;
$row-row-lighten:3%;

@mixin sortGradient() {
    $k:0;
    @while $k <= 10 {
        &.sort-color-#{$k} {
            $mixColor: mix($header-color,$header-color-sorting,(10-$k)*10);
            background-color: lighten($mixColor,$header-column-lighten);
        }
        $k: $k + 1;
    }
}

$arrow-box-size:1rem;
arrow-down {
    display: flex;
    font-size: .8rem;
    height:100%;
    align-items: center;
    justify-content: center;
    position:absolute;
    top:0px;
    &::before { content:'\27A2'; }
    transform: rotate(90deg);
}
arrow-up {
    @extend arrow-down;
    transform: rotate(-90deg);
}
.strike-grid-header {
    > [role="header-cel"] {
        display: flex;
        overflow: hidden;
        align-items: center;
        color:white;
        width: 100%;
        &:nth-child(odd) {
            background-color: $header-color;
            @include sortGradient();
        }
        &:nth-child(even) {
            background-color: lighten($header-color,$header-column-lighten);
            @include sortGradient();
        }

        > .arrow-holder {
            position:relative;
            left:$arrow-box-size;
            width:$arrow-box-size * 2;
        }
        > .header-label {
            width:100%;
            max-width:100%;
            &.with-arrows {
                width:calc(100% - $arrow-box-size * 3);
                max-width:calc(100% - $arrow-box-size * 3);
            }
            display:inline-block;
            text-align:center;
            overflow:hidden;
            text-overflow:ellipsis;
        }
    }
}
.strike-grid-scrollbody {
    position:relative;
    background-color:#CCC;
    overflow-x:visible;
    overflow-y:scroll;
    max-height:100%;
}
@mixin alternateColors($baseColor) {
    &:nth-child(odd) > div {
        &:nth-child(odd) {
            background-color: $baseColor;
        }
        &:nth-child(even) {
            background: lighten($baseColor,$row-column-lighten);
        }
    }
    &:nth-child(even) > div {
        &:nth-child(odd) {
            background-color: lighten($baseColor,$row-row-lighten);
        }
        &:nth-child(even) {
            background: lighten(lighten($baseColor,$row-column-lighten),$row-row-lighten);
        }
    }
}
@mixin hoverDevice {
    @media (hover: hover) and (pointer: fine) {
        &:hover {
            @content;
        }
    }
}
@mixin colorScheme($text,$base,$hover,$select) {
    color:$text;
    @include alternateColors($base);
    @include hoverDevice {
        &:not(.selected) {
            @include alternateColors($hover);
        }
    }
    &.selected {
        @include alternateColors($select);
    }
}
.strike-grid-row {
    display: contents;
    & > div {
        display: flex;
        cursor: pointer;
        transition:all .16s;
    }
    &.centertxt > div {
        justify-content: center;
        align-items: center;
    }

    @include colorScheme($default-text-color,$default-hover-color, $default-hover-color, $default-select-color);
    
    $alternate-colors: ('red':(white,rgb(215, 68, 68),rgb(235, 106, 106),rgb(243, 5, 5)));
    @each $k, $v in $alternate-colors {
        &.#{$k} {
            @include colorScheme(nth($v,1),nth($v,2),nth($v,3),nth($v,4));
        }
    }
}
